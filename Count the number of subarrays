Given an array A[] of N integers and a range(L, R). The task is to find the number of subarrays having sum in the range L to R (inclusive).

Example 1:

Input:
N = 3, L = 3, R = 8
A[] = {1, 4, 6}
Output: 
3
Explanation: 
The subarrays are [1,4], [4] and [6]


def countSubarraysInRangeSum(arr, N, L, R):
    def countSubarraysLessThanOrEqual(arr, target):
        count, prefix_sum, result = 0, 0, 0
        for num in arr:
            prefix_sum += num
            if prefix_sum <= target:
                count += 1
            else:
                result += (count * (count + 1)) // 2
                count = 0
        return result + (count * (count + 1)) // 2

    # Count subarrays with sum less than or equal to R
    count_R = countSubarraysLessThanOrEqual(arr, R)

    # Count subarrays with sum less than L - 1
    count_L_minus_1 = countSubarraysLessThanOrEqual(arr, L - 1)

    # Number of subarrays in the range [L, R] is count_R - count_L_minus_1
    result = count_R - count_L_minus_1
    return result

# Example
N = 3
L = 3
R = 8
A = [1, 4, 6]
result = countSubarraysInRangeSum(A, N, L, R)
print(result)
